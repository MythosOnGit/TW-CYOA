tags: Tutorial
title: Tutorial 3
caption: Tutorial 3: Append and Transclude
description: Reusing content and avoiding repetition.
tmap.id: c1c5771f-597a-451b-b13f-ba1e1d20d63e

\rules except wikilink

A frequent pattern in CYOA novels is to offer a reader multiple decisions, but regardless of each decision's outcome, they all segue into the same story path. In old paperback CYOAs, this shared story path would need to be copy-pasted for each decision. However, <<plugin>> provides mechanisms for reusing content like that. This tutorial teaches you two techniques: appending and transcluding. Both are incredibly versatile, and useful in different ways.

! Appending

Commonly in CYOAs, you'll have pages which will end with the same content or choices. Appending allows you to specify that one page comes after another, thus reusing common content without repetition. Let's go back to our previous example about "Go left" and "Go right". Suppose both those roads meet back up. You might have a page called <<page "Merge">>. Let's [[create a new tiddler|Create a New Tiddler]] and give it the following content:

```
The road your walking reaches a junction where it merges with another. Now there is only one path forward.
```

In your generated CYOA novel, you'll want pages both <<page Left>> and <<page Right>> to show this content after their own as though it were one continuous page (called a [[Page Run]]). There are two ways to specify that <<page Left>> and <<page Right>> should append page <<page Merge>>:

!!! Manually

Edit page <<page Left>>. In the "Add a new field" text-boxes at the bottom of the Edit pane, specify a field name of <<field cyoa.append>> and a field value of <<value Merge>>. Then click "add". After you save the tiddler, you should see your <<tid Merge>> tiddler listed at the bottom of the page <<page Left>>'s view.

{{$:/core/images/warning}} ''Note:'' If tiddler <<tid Merge>>'s actual title includes spaces (e.g. <<page "Roads Merge">>), you'll need to wrap that name in quotation, like <<value [["Roads Merge"]]>> or <<value "[[Roads Merge]]">>. This is because the <<flink AppendField>> field actually accept a [[filter|https://tiddlywiki.com/#Filters]] which allows multiple values. Don't worry about that means right now. We'll cover it later. Just be aware of the need for quotation if your title has spaces.

!!! Visually

Now let's set up page <<page Right>> to append <<page Merge>>. If you're using TiddlyMap, appending is represented with solid blue edges, and you probably saw just a line appear after creating the append between <<page Left>> and <<page Merge>> above. You can actually draw these edges visually. Let's do that. Clicking on {{$:/plugins/felixhayashi/vis/img/network/connectIcon.png}} ''Add Edge'' above the tiddlymap view, and then drag a line from nodes <<page Right>> to <<page Merge>>. In the resulting "Edge type specification" popup, specify `tw-filter:cyoa.append` and click ''OK''. That's it. <<page Right>> will now append <<page Merge>> in your generated CYOA. This created the <<field cyoa.append>> field automatically.

!!! Longer page runs

Additionally, page <<page Merge>> can append another page itself, like <<page Farther_Along>>, and thus when page <<page Left>> is visited, pages <<page Left>>, <<page Merge>>, and <<page Farther_Along>> will all appear in the page run.

! Transcluding

Transclusion allows you to inject the contents of one page into another. For instance, to inject the body of tiddler <<page B>> into <<page A>>, you would include `{{B}}` inside the body of <<page A>> wherever you wish <<page B>>'s content to show up. Transclusion is a actually a Tiddlywiki feature. [[Tiddlywiki's documentation covers transclusion in great detail|https://tiddlywiki.com/#Transclusion]].

If you're unsure how Transclusion works, don't worry about it. The important concept to understand in this tutorial is Appending. That will come up again in later tutorials. Transclusion won't. It's something you'll figure out in time as you get used to TiddlyWiki.

In Tiddlymap, transclusion shows up as a dark red line.

! Demo

Here is a mini project for you to explore. These nodes contain annotations that have further details and tips: <<demo "Demo 3">>

<<next Tutorial>>
