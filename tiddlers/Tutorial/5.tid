tags: Tutorial
title: Tutorial 5
caption: Tutorial 5: Before and After
description: How to test whether //other// pages have been visited.
tmap.id: eeaacf35-c8bd-4a6f-8426-113926b8a144

Testing whether a page has been visited or not is all well and good, but what about if a //different// page has been visited? That's where the ''before'' and ''after'' mechanic come in.

! Showing a page before or after another page

Let's say I have page "Rescue_Princess". I don't want it to appear in any <<widget options>> lists until the reader has visited the page "Slay_Dragon", but before "Princess_Died" is visited. There are two ways to specify these constraints.

!!! Manually

This works much the same as with <<field cyoa.append>>. Edit page "Rescue_Princess". Add a new field named <<flink AfterField>> with a value of "Slay_Dragon". Then add a second field named <<flink BeforeField>> with a value of "Princess_Died". Save the tiddler, and now both constraints are complete.

Just like <<field cyoa.append>>, Both <<field cyoa.after>> and <<field cyoa.before>> are [[filter field|https://tiddlywiki.com/#Filters]]. This means you can specify multiple tiddlers, such as making <<field cyoa.after>> equal <<value "Slay_Dragon Slay_Minotaur Slay_Wendigo">>, or even <<value "[prefix[Slay_]]">>. "Rescue_Princess" will only [[evaluate true|Evaluation]] only if //all// pages in <<field cyoa.after>> have been visited. And //all// pages in <<field cyoa.before>> have not been visited.

<<note """Because it's a filter field, take care to wrap titles with spaces in brackets. (e.g. <<value "[[Slay Dragon]]">>).""" >>

!!! Visually

If you're using [[TiddlyMap|Plugins/TiddlyMap]], "after" constraints are represented with dotted green edges, and "before" constraints are dotted red-orange edges. You can create them the same way as drawing "append" edges. Use {{$:/plugins/felixhayashi/vis/img/network/connectIcon.png}} ''Add Edge'' to drag a new edge from node "Rescue_Princess" to node "Slay_Dragon". In the "Edge type" popup, specify "tw-filter:cyoa.after". Then draw a second edge from node "Rescue_Princess" to node "Princess_Died" and specify an edge type of "tw-filter:cyoa.before".

Multiples edges can be drawn from one node to others to create additional constraints. All must be satisfied for that node to evaluate true.

! Showing text before or after another page

You can also set constraints on active nodes in your page's text by using the <<wlink CyoaWidget>> widget, like so:

```html
You see the princess in the highest window of the tower.

<$cyoa before="Slay_Dragon">

However, the ferocious dragon sits at the towers base.
</$cyoa>
<$cyoa after="Slay_Dragon">

With the dragon dead, you're free to ascend and rescue her.
</$cyoa>
```

Just like with the <<field cyoa.before>> and <<field cyoa.after>> fields, these are filter attributes, which means you can specify multiple titles, or more sophistocated filters, and all specified titles must evaulate to true. Also, take care with titles with spaces. Wrap those in brackets.

!!! The <<widget else>> widget

There is another widget you should know about, and that's the <<wlink ElseWidget>> widget. It's an active node that has the constraint that the last active widget to come before it must have evaluated to false. So the example above could have been written as this:

```html
You see the princess in the highest window of the tower.

<$cyoa before="Slay_Dragon">

However, the ferocious dragon sits at the towers base.
</$cyoa>
<$else>

With the dragon dead, you're free to ascend and rescue her.
</$else>
```

<!-- Have a direct link to the example of else chaining -->
<<widget else>> widgets are a little more sophisticated than that. They accept "before" and "after" attributes too, and they can be chained together. The demo has an example of this.

! Demo

Here is an example project for you to explore, complete with annotations: <<demo>>

<<next Tutorial>>
