tags: Tutorial
title: Tutorial 6
caption: Tutorial 6: Touch and Reset
description: Manipulating the state of dedicated virtual pages.
tmap.id: 48174d8f-a39f-49c4-b2b4-b1663e907b08

So far, the only state your story can have is the ability to track whether a certain page has been visited or not, and the only way to change it's visited status is to... well... //visit// it. And then once it's "visited", there's no undoing it. These limitations are addressed by the ''touch'' and ''reset'' mechanic.

! Touching Pages

Touching a page means to flag it as having been visited even if it's not in the current [[Page Run]]. This is a useful tool that allows you to manipulate the same page from multiple tiddlers. Or to manipulate many pages from one tiddler. It also allows you to set a page as visited even if it would [[evaluate false|Evaluation]].

Unlike all the previous tricks you've learned (''before'', ''after'', ''first'', and ''visited'') ''touch'' is not a //constraint//. That means it does not affect whether a page will evaluate true or not. Instead, it is an //action//, which is something that is performed when the [[Page]] or [[Active Node]] is viewed.


!!! How

Specifying that a page should touch another page is done exactly the same way as <<field cyoa.before>> and <<field cyoa.after>>: Give the tiddler a <<field cyoa.touch>> field with a filter argument specifying what pages to touch when this page is viewed.

In Tiddlymap, same thing. Draw an edge from one node to another and specify an edge type of "tw-filter:cyoa.touch". It gets represented with a dotted dark-brown edge.

Nodes can also touch pages. They only do so if they evaluate true and render. Same deal: Give the node a <<attr touch>> attribute with a filter argument.

! Resetting pages

Reset is the opposite of touch. While touching a page changes its state so it's considered to have been visited, reset undoes that. Once you've reset a page, it's like new. Constraints like ''before'' and ''first'' will evaluate true for that page, while ''after'' and ''visited'' will be false, at least until the page is visited or touched again.

Like ''touch'' and the others, you can specify a reset action on a page using the field <<field cyoa.reset>>. It accept a filter argument as usual. Visually, you can draw an edge and specify an edge type of "tw-filter:cyoa.reset". It shows as a dotted teal edge. Nodes can have reset actions too using the attribute <<attr reset>>. The reset action only occurs when the node evaluates true and renders.

! Page switches

Now you know how to set a page as visited and unvisited regardless of whether it's ever visited. That means you can now imagine a page not necessarily as something which may or may not have been visited, but instead as a switch which you can turn on and off without ever visiting it at all. Such pages can represent concepts rather than being a passage of text.

* You can have data tiddlers that represent items. It contains stats about the item, and it's visit state represents whether it's in the protagonist's inventory.
* You could have pages that represent knowledge the reader knows. They can be learned from many different story arcs.
* You can have pages represent status effects, like "Tired" or "Poisoned". Once these statuses are remedied, the pages are reset.

Since these pages aren't actually ever viewed, they can be [[virtual pages|Virtual Page]], meaning they're never actually compiled into your cyoa. They're only ever manipulated with through ''touch'' and ''reset'' actions, and are only tested against with ''before'' and ''after'' from other pages. For an example of this, check the demo below.

! Demo

Here is an annotated example project that shows off how ''touch'' and ''reset'' can be used: <<demo "Demo 6">> 

<<next Tutorial>>
