caption: Logic 2: Before and After
description: How to test whether //other// pages have been visited.
tags: Logic
title: Logic2
tmap.id: eeaacf35-c8bd-4a6f-8426-113926b8a144
type: text/vnd.tiddlywiki

Testing whether a page has been visited or not is all well and good, but what about if a //different// page has been visited? That's where the <<attr before>> and <<attr after>> mechanic come in.

! Showing a page before or after another page

Let's say I have page <<page Rescue_Princess>>. I don't want it to appear in any <<widget options>> lists until the reader has visited the page <<page Slay_Dragon>>, but before <<page Princess_Died>> is visited. There are two ways to specify these constraints.

!!! Manually

This works much the same as with <<field cyoa.append>>. Edit page <<page Rescue_Princess>>. Click the "after" in the <<pill [[before after]]>> pill, add the value of <<value Slay_Dragon>> to the resulting <<flink AfterField>> field. To add a "before" constraint, click the "before" in <<pill [[before after]]>> and in the resulting <<flink BeforeField>> field, write in <<value Princess_Died>>. Save the tiddler, and now both constraints are complete.

Just like <<field cyoa.append>>, Both <<field cyoa.after>> and <<field cyoa.before>> are [[filter field|Filter]]. This means you can specify multiple tiddlers, such as making <<field cyoa.after>> equal <<value "Slay_Dragon Slay_Minotaur Slay_Wendigo">>, or even <<value "[prefix[Slay_]]">>. "Rescue_Princess" will [[evaluate true|Evaluation]] only if //all// pages in <<field cyoa.after>> have been visited. And //all// pages in <<field cyoa.before>> have not been visited.

[[Be careful using tiddlers with spaces in their title!|Pages with Spaces]]

!!! Visually

If you're using TiddlyMap, "after" constraints are represented with dotted green edges, and "before" constraints are dotted red-orange edges. You can create them the same way as drawing "append" edges. Use {{$:/plugins/felixhayashi/vis/img/network/connectIcon.png}} ''Add Edge'' to drag a new edge from node <<page Rescue_Princess>> to node <<page Slay_Dragon>>. In the "Edge type" popup, specify "tw-filter:cyoa.after". Then draw a second edge from node <<page Rescue_Princess>> to node <<page Princess_Died>> and specify an edge type of "tw-filter:cyoa.before".

Multiples edges can be drawn from one node to others to create additional constraints. All must be satisfied for that node to evaluate true.

! Showing text before or after another page

You can also set constraints on [[Active Nodes|Active Node]] in your page's text by using the <<wlink CyoaWidget>> widget, like so:

```html
You see the princess in the highest window of the tower.

<$cyoa before="Slay_Dragon">

However, the ferocious dragon sits at the towers base.
</$cyoa>
<$cyoa after="Slay_Dragon">

With the dragon dead, you're free to ascend and rescue her.
</$cyoa>
```

Just like with the <<field cyoa.before>> and <<field cyoa.after>> fields, these are filter attributes, which means you can specify multiple titles, or more sophistocated filters, and all specified titles must evaulate to true. Again, [[take care with titles with spaces|Pages with Spaces]].

!!! The <<widget else>> widget

There is another widget you should know about, and that's the <<wlink ElseWidget>> widget. It's an active node that has the constraint that the last active widget to come before it must have evaluated to false. So the example above could have been written as this:

```html
You see the princess in the highest window of the tower.

<$cyoa before="Slay_Dragon">

However, the ferocious dragon sits at the towers base.
</$cyoa>
<$else>

With the dragon dead, you're free to ascend and rescue her.
</$else>
```

<$link to="ElseWidget"><<widget else>> widgets are a little more sophisticated than that.</$link> They accept "before" and "after" attributes too, and they can be chained together. There's an [[example of this|Logic2/end]] in the demo: <<demo>>

;<$link to=Logic3>{{Logic3!!caption}}</$link>
: You can continue to learn new tricks about declarative constraints, such as how to trigger pages as having been visited or not through explicit declarations.
;<$link to=Copy1>{{Copy1!!caption}}</$link>
: Or you can learn about an alternative to Appending known as transclusion which allows you to embed page content in others and declaratively generate content from templates.