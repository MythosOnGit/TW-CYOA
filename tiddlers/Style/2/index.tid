caption: Style 2: Stylesheets
description: More elaborate styling using CSS
title: Style2
tmap.id: 0e54db19-ad75-4e0f-a3bd-bf5da58b330e
type: text/vnd.tiddlywiki

Adding wikitext is nice, but if you're creating a polished interactive story, sooner or later, you'll need to dive into CSS or Cascading Style Sheets. This tutorial isn't about how to write CSS. That's a far ranging topic which requires [[tutorials|https://www.w3schools.com/css/]] [[of its own|https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps]]. This tutorial is about how to apply written css to your interactive story.

!! Where to write CSS

If you downloaded the <$link to={{Intro1!!title}}>Ready-to-go Project in {{Intro1!!caption}}</$link>, then you already have a tiddler configured for writing css to your interactive story: [[Stylesheet.css]].

Let's take a closer look at it. If you open it, you'll see that it's displaying css as plaintext instead of as rendered wikitext. (It won't be highlighted in your interactive story unless you install the [[Highlight plugin|$:/plugins/tiddlywiki/highlight]].) This is because it's Type is set to <<value text/css>>, which you can see if you edit the tiddler and look toward the bottom at this:

@@..tc-tiddler-edit-frame
<$tiddler tiddler="Stylesheet.css">{{||$:/core/ui/EditTemplate/type}}</$tiddler>
@@

You don't actually have to set the tiddler to css. It's just a convenience. (In fact, if you don't, you can apply wikitext to programmatically generate css, but that's an advanced topic for another day.)

What is necessary, however, is the <<tag $:/tags/cyoa/Stylesheet>> tag. This tells <<plugin>> that this tiddler must be packed into the generated interactive novel such that its contents will be processed as css. TiddlyWiki uses a similar tag <<tag $:/tags/Stylesheet>> to indicate when a tiddler's contents should be used for css within ~TiddlyWiki itself. In fact, you can put both tags on a tiddler, and both your ~TiddlyWiki project and your generated interactive story will use the css. This can be helpful if you'd like your tiddlers to emulate your generated pages, although not all css can be meaningfully shared like this.

!! How to apply CSS to a specific page

Css in a tiddler tagged with <<tag $:/tags/cyoa/Stylesheet>> will be active for your entire interactive story. That means content like <<value "ul { ... }">> will apply to all your bullet-point lists.

However, you might have css which you only want applied to a single page. Fortunately, this is simple, because <<plugin>> uses a page's title as the id for the corresponding div inside your interactive novel. So content like <<value "#myPage { ... }">> will apply only to the page <<page myPage>>.

<<note """Spaces are an illegal character in element IDs, so if your tiddler has any spaces in its title, those spaces will be escaped to <<value %20>> in the corresponding css ID. For this reason and others, [[you should avoid having spaces in your titles|Pages with Spaces]]. """ >>

!! How to apply CSS to sets of pages

TiddlyWiki core has a way of applying CSS to specific tiddlers [[based on tags|https://tiddlywiki.com/static/Custom%2520styles%2520by%2520data-tags.html]]. <<plugin>> doesn't have this. (But it might someday!)

What you can do is apply CSS to tiddlers based on pattern matching its ID. For instance, <<value """[id^="House/"] { ... }""" >> will apply its css to all pages whose title begins with <<value House/>>. There are [[other pattern matching tricks too|https://tiddlywiki.com/static/Custom%2520styles%2520by%2520data-tags.html]], and there is an example of all these CSS tricks in this tutorial's demo: <<demo>>
